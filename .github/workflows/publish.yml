name: Build and Publish NuGet Package

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
    # 1. Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # 3. Извлечение версии из тега
    - name: Extract version from tag
      id: get_version
      run: |
        # Убираем 'v' из начала тега (v1.1.0 ? 1.1.0)
        VERSION="${GITHUB_REF#refs/tags/v}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "?? Extracted version: $VERSION"

    # 4. ВОССТАНОВЛЕНИЕ NuGet пакетов
    - name: Restore
      run: dotnet restore Kritjara.Collections.Notify.csproj

    # 5. Build project
    - name: Build
      run: dotnet build Kritjara.Collections.Notify.csproj --configuration Release --no-restore -p:Version=${{ steps.get_version.outputs.VERSION }}

    # 6. Create NuGet package
    - name: Pack
      run: dotnet pack Kritjara.Collections.Notify.csproj --configuration Release --no-build -p:Version=${{ steps.get_version.outputs.VERSION }} --output ./nupkg

    # 7. Publish to GitHub Packages
    - name: Publish to GitHub Packages
      run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_PUBLISH_TOKEN }} --source "https://nuget.pkg.github.com/Kritjara/index.json" --skip-duplicate

    # 8. Подтверждение публикации (опционально)
    - name: Verify publication
      run: |
        echo "? Package version ${{ steps.get_version.outputs.VERSION }} published successfully!"
        echo "?? Package: Kritjara.Collections.Notify"
        echo "??? Version: ${{ steps.get_version.outputs.VERSION }}"